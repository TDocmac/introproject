<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level creation

//room size
room_width = (pcell_w/16) * 1920 ;
room_height = (pcell_h/16) * 1080 ;

//grid width and height
var width = room_width div pcell_w;
var height = room_height div pcell_h;

//Grid and mp grid maker
grid = ds_grid_create(width,height);
mpgrid = mp_grid_create(0,0, width, height,pcell_w,pcell_h)

//fill with void
ds_grid_set_region(grid, 0, 0, width -1, height-1,void);

//randomize map
randomize();

//create controller
var cx = width div 2;
var cy = height div 2;

//create player and pointer
if (!instance_exists(obj_pointer)){

instance_create(cx*pcell_w+pcell_w/2,cy*pcell_h+pcell_h/2,obj_pointer)
}

instance_create(cx*pcell_w+pcell_w/2,cy*pcell_h+pcell_h/2,proto_obj_player)

//controller direction
var cdir = irandom(3);

//odds of changing direction
var odds = 1;

// steps to create level
repeat (2000) {
    grid[# cx, cy] = tfloor;   
    
    //randomize cdireccion
    if (irandom(odds) == odds) {
        cdir = irandom(3)}
    //controller movement
    var xdir = lengthdir_x(1,cdir*90);
    var ydir = lengthdir_y(1,cdir*90);
    cx += xdir;
    cy += ydir;
    
    //stay in grid
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2);
    
}
  
// wall and floor creation on grid
for (var yy = 1,; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++){
        if (grid[# xx, yy] == tfloor) {
            //wall checking
            if (grid[# xx+1, yy] != tfloor) {grid[# xx+1, yy] = twall}
            if (grid[# xx-1, yy] != tfloor) {grid[# xx-1, yy] = twall}
            if (grid[# xx, yy+1] != tfloor) {grid[# xx, yy+1] = twall}
            if (grid[# xx, yy-1] != tfloor) {grid[# xx, yy-1] = twall}
        }
    }
}

for (var yy = 0; yy &lt; height; yy++){
    for (var xx = 0; xx &lt; width; xx++){
        if (grid[# xx, yy] == tfloor) {
            //floor drawing
            tile_add(bg_proto,96,160, pcell_w, pcell_h, xx * pcell_w, yy * pcell_h, 1000001)
            //Enemy spawn
            var odds = 30;
            var ex = xx * pcell_w + pcell_w/2;
            var ey = yy * pcell_h + pcell_h/2;
            if (point_distance(ex, ey, proto_obj_player.x, proto_obj_player.y) &gt; 80 and irandom(odds)== odds) {
                instance_create(ex, ey, proto_enemy)
                }
            }
        else if (grid[# xx, yy] == twall) {
            //wall drawing
            tile_add(bg_proto,128,32, pcell_w, pcell_h, xx * pcell_w, yy * pcell_h, 1000000)
            mp_grid_add_cell(mpgrid, xx, yy); 
            }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy grid
ds_grid_destroy(grid)
mp_grid_destroy(mpgrid)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
