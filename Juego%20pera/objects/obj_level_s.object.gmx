<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///level creation

///room size

room_width = (cell_w/4) * 1920;
room_height = (cell_h/4) * 1080;

//grid width and height
var width = room_width div cell_w;
var height = room_height div cell_h;

//Grid and mp grid maker
grid = ds_grid_create(width,height);
mpgrid = mp_grid_create(0,0, width, height,cell_w,cell_h)

//fill with void
ds_grid_set_region(grid, 0, 0, width -1, height-1,void);

//randomize map
randomize();

//create controller
if (instance_exists(obj_player)){
    var cx = width div 2
    var cy = height div 2
    with (obj_player){
        x = (cx+1)*cell_w + cell_w/2
        y = (cy)*cell_h + cell_h/2}
            with (obj_pointer){
        x = (cx+1)*cell_w + cell_w/2
        y = (cy)*cell_h + cell_h/2}
}
else {
    var cx = width div 2;
    var cy = height div 2;
}

//create player and pointer
if (!instance_exists(obj_pointer)){
    instance_create((cx+1)*cell_w+cell_w/2,(cy)*cell_h+cell_h/2,obj_pointer)
}

if (!instance_exists(obj_player)){
    instance_create((cx+1)*cell_w+cell_w/2,(cy)*cell_h+cell_h/2,obj_player)
}

//initial room
ds_grid_set_disk(grid, cx, cy, 6, tfloor);

//create return stairs
instance_create((cx)*cell_w+cell_w/2,(cy)*cell_h+cell_h/2,obj_return)

//controller direction
var cdir = irandom(3);

//odds of changing direction
var odds = 1;

//steps to create level
repeat(70) {
        //randomize cdireccion
    //if (irandom(odds) == odds) {
        cdir = irandom(3)
    
    var steps = choose(25,50)
    
    if ((cx+lengthdir_x(steps+9,cdir*90))&lt;0 or (cx+lengthdir_x(steps+9,cdir*90))&gt;width or (cy+lengthdir_y(steps+9,cdir*90)) &lt; 0 or (cy+lengthdir_y(steps+9,cdir*90)) &gt; height) {
      cdir+=2
    }
    if (steps == 25){
        repeat(steps){
            ds_grid_set_region(grid, cx, cy, cx+1, cy+1, tfloor);
            //controller movement
            var xdir = lengthdir_x(1,cdir*90);
            var ydir = lengthdir_y(1,cdir*90);
            cx += xdir;
            cy += ydir;
            }
        ds_grid_set_disk(grid, cx, cy, 5, tfloor);
    }
    else if (steps == 50) {
        repeat(steps){
            ds_grid_set_region(grid, cx-1, cy-1, cx+1, cy+1, tfloor);
            //controller movement
            var xdir = lengthdir_x(1,cdir*90);
            var ydir = lengthdir_y(1,cdir*90);
            cx += xdir;
            cy += ydir;
        }
        ds_grid_set_disk(grid, cx, cy, 8, tfloor);
    }
}

//place the stairs 
instance_create((cx)*cell_w+cell_w/2,(cy)*cell_h+cell_h/2,obj_stairs);

// wall and floor creation on grid
for (var yy = 1,; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++){
        if (grid[# xx, yy] == tfloor) {
            //wall checking
            if (grid[# xx+1, yy] != tfloor) {grid[# xx+1, yy] = twall}
            if (grid[# xx-1, yy] != tfloor) {grid[# xx-1, yy] = twall}
            if (grid[# xx, yy+1] != tfloor) {grid[# xx, yy+1] = twall}
            if (grid[# xx, yy-1] != tfloor) {grid[# xx, yy-1] = twall}
        }
    }
}

//corner walls adding
for (var yy = 1,; yy &lt; height-1; yy++) {
    for (var xx = 1; xx &lt; width-1; xx++){
        if (grid[# xx, yy] == void) {
            if (grid[# xx+1, yy] == twall and grid[# xx, yy+1] == twall and grid[# xx+1, yy+1] == tfloor) {grid[# xx, yy] = twall}
            if (grid[# xx+1, yy] == twall and grid[# xx, yy-1] == twall and grid[# xx+1, yy-1] == tfloor) {grid[# xx, yy] = twall}
            if (grid[# xx-1, yy] == twall and grid[# xx, yy+1] == twall and grid[# xx-1, yy+1] == tfloor) {grid[# xx, yy] = twall}
            if (grid[# xx-1, yy] == twall and grid[# xx, yy-1] == twall and grid[# xx-1, yy-1] == tfloor) {grid[# xx, yy] = twall}}
    }
}
    
for (var yy = 0; yy &lt; height; yy++){
    for (var xx = 0; xx &lt; width; xx++){
        if (grid[# xx, yy] == tfloor) {
            //floor drawing
            tile_add(bg_proto,96,160, cell_w, cell_h, xx * cell_w, yy * cell_h, 1000001)
            //Enemy spawn
            var odds = 50;
            var ex = xx * cell_w + cell_w/2;
            var ey = yy * cell_h + cell_h/2;
            if (point_distance(ex, ey, obj_player.x, obj_player.y) &gt; 80 and irandom(odds)== odds) {
                instance_create(ex, ey, enemy)
                }
            }
        else if (grid[# xx, yy] == twall) {
            //wall drawing
            tile_add(bg_proto,128,32, cell_w, cell_h, xx * cell_w, yy * cell_h, 1000000)
            mp_grid_add_cell(mpgrid, xx, yy); 
            }
    }
}

room_speed = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart room

with (enemy) {instance_destroy()}
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
